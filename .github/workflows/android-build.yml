name: Build Android APK

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Use System Gradle Instead of Wrapper
      run: |
        echo "=== Using System Gradle to Bypass Wrapper Issues ==="
        cd /opt
        sudo wget https://services.gradle.org/distributions/gradle-8.1.1-bin.zip
        sudo unzip gradle-8.1.1-bin.zip
        sudo ln -sf /opt/gradle-8.1.1/bin/gradle /usr/local/bin/gradle
        gradle --version
        echo "=== System Gradle 8.1.1 ready - bypassing wrapper completely ==="

    - name: Cache Node Modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-

    - name: Install Dependencies
      run: npm install

    - name: Create Android Configuration Files
      run: |
        echo "=== Creating Android Configuration Files ==="
        mkdir -p android/app/src/main/java/com/vyaktiai/mobile
        mkdir -p android/app/src/main/res/values
        mkdir -p android/app/src/main/assets
        
        # Create root build.gradle
        cat > android/build.gradle << 'GRADLE_ROOT_END'
        buildscript {
            ext {
                buildToolsVersion = "35.0.0"
                minSdkVersion = 24
                compileSdkVersion = 35
                targetSdkVersion = 35
                ndkVersion = "25.1.8937393"
                kotlinVersion = "1.8.10"
            }
            dependencies {
                classpath("com.android.tools.build:gradle:8.1.1")
                classpath("com.facebook.react:react-native-gradle-plugin")
                classpath("org.jetbrains.kotlin:kotlin-gradle-plugin")
            }
        }
        
        apply plugin: "com.facebook.react.rootproject"
        
        allprojects {
            repositories {
                google()
                mavenCentral()
                maven { url "https://www.jitpack.io" }
            }
        }
        GRADLE_ROOT_END
        
        # Create app build.gradle
        cat > android/app/build.gradle << 'GRADLE_APP_END'
        apply plugin: "com.android.application"
        apply plugin: "org.jetbrains.kotlin.android"
        apply plugin: "com.facebook.react"
        
        react {
            entryFile = "index.js"
            reactNativeDir = rootProject.file("../node_modules/react-native")
            codegenDir = rootProject.file("../node_modules/@react-native/codegen")
            cliFile = rootProject.file("../node_modules/@react-native/cli/build/bin.js")
            debuggableVariants = ["liveReload", "nightly", "staging"]
        }
        
        def enableSeparateBuildPerCPUArchitecture = true
        def enableProguardInReleaseBuilds = true
        def jscFlavor = 'org.webkit:android-jsc:+'
        
        android {
            ndkVersion rootProject.ext.ndkVersion
            compileSdkVersion rootProject.ext.compileSdkVersion
            namespace "com.vyaktiai.mobile"
            
            defaultConfig {
                applicationId "com.vyaktiai.mobile"
                minSdkVersion rootProject.ext.minSdkVersion
                targetSdkVersion 35
                versionCode 1
                versionName "1.0.0"
                multiDexEnabled true
                ndk {
                    abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
                }
            }
            
            signingConfigs {
                debug {
                    storeFile file('debug.keystore')
                    storePassword 'android'
                    keyAlias 'androiddebugkey'
                    keyPassword 'android'
                }
            }
            
            buildTypes {
                debug {
                    signingConfig signingConfigs.debug
                }
                release {
                    signingConfig signingConfigs.debug
                    minifyEnabled enableProguardInReleaseBuilds
                    proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
                }
            }
            
            splits {
                abi {
                    reset()
                    enable enableSeparateBuildPerCPUArchitecture
                    universalApk false
                    include "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
                }
            }
            
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def versionCodes = ["armeabi-v7a": 1, "arm64-v8a": 2, "x86": 3, "x86_64": 4]
                    def abi = output.getFilter(com.android.build.OutputFile.ABI)
                    if (abi != null) {
                        output.versionCodeOverride = defaultConfig.versionCode * 1000 + versionCodes.get(abi)
                    }
                }
            }
        }
        
        dependencies {
            implementation fileTree(dir: "libs", include: ["*.jar"])
            implementation("com.facebook.react:react-android")
            implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.0.0")
            implementation 'androidx.multidex:multidex:2.0.1'
            debugImplementation("com.facebook.flipper:flipper:0.125.0")
            debugImplementation("com.facebook.flipper:flipper-network-plugin:0.125.0") {
                exclude group:'com.squareup.okhttp3', module:'okhttp'
            }
            debugImplementation("com.facebook.flipper:flipper-fresco-plugin:0.125.0")
            if (hermesEnabled.toBoolean()) {
                implementation("com.facebook.react:hermes-android")
            } else {
                implementation jscFlavor
            }
        }
        
        apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
        GRADLE_APP_END
        
        # Create settings.gradle
        cat > android/settings.gradle << 'GRADLE_SETTINGS_END'
        rootProject.name = 'VyaktiAI'
        include ':app'
        apply from: file("../node_modules/@react-native-community/cli-platform-android/native_modules.gradle")
        applyNativeModulesSettingsGradle(settings)
        GRADLE_SETTINGS_END
        
        # Create gradle.properties
        cat > android/gradle.properties << 'GRADLE_PROPS_END'
        org.gradle.jvmargs=-Xmx4096m -XX:+UseG1GC
        android.useAndroidX=true
        android.enableJetifier=true
        FLIPPER_VERSION=0.125.0
        newArchEnabled=false
        hermesEnabled=false
        org.gradle.parallel=true
        org.gradle.configureondemand=true
        org.gradle.daemon=true
        org.gradle.caching=true
        GRADLE_PROPS_END

    - name: Fix React Native Library Issues
      run: |
        echo "=== Fixing React Native Library Issues ==="
        
        # Fix react-native-audio-recorder-player classpath issue
        if [ -f "node_modules/react-native-audio-recorder-player/android/build.gradle" ]; then
          sed -i '/classpath.*project(/d' node_modules/react-native-audio-recorder-player/android/build.gradle
          sed -i '/classpath.*":ReactAndroid"/d' node_modules/react-native-audio-recorder-player/android/build.gradle
          echo "Fixed react-native-audio-recorder-player classpath dependencies"
        fi
        
        # Define libraries to fix
        declare -A libraries=(
          ["react-native-sound"]="com.zmxv.RNSound"
          ["react-native-vector-icons"]="com.oblador.vectoricons"
          ["react-native-tts"]="net.no_mad.tts"
          ["react-native-audio-recorder-player"]="com.dooboolab.audiorecorderplayer"
          ["react-native-device-info"]="com.learnium.RNDeviceInfo"
          ["react-native-permissions"]="com.zoontek.rnpermissions"
          ["@react-native-voice/voice"]="com.wenkesj.voice"
          ["react-native-webview"]="com.reactnativecommunity.webview"
          ["react-native-splash-screen"]="org.devio.rn.splashscreen"
        )
        
        # Fix each library
        for lib in "${!libraries[@]}"; do
          namespace="${libraries[$lib]}"
          gradle_file="node_modules/$lib/android/build.gradle"
          
          if [ -f "$gradle_file" ]; then
            echo "Fixing $lib..."
            
            # Add namespace if missing
            if ! grep -q "namespace" "$gradle_file"; then
              sed -i "/android {/a\\    namespace \"$namespace\"" "$gradle_file"
            fi
            
            # Add buildFeatures if missing
            if ! grep -q "buildFeatures" "$gradle_file"; then
              sed -i '/namespace/a\    buildFeatures {\n        buildConfig true\n    }' "$gradle_file"
            fi
            
            # Remove React Native dependencies - let auto-linking handle them
            sed -i '/implementation.*com\.facebook\.react:react-native/d' "$gradle_file"
            sed -i '/implementation.*"com\.facebook\.react:react-native/d' "$gradle_file"
            sed -i '/api.*com\.facebook\.react:react-native/d' "$gradle_file"
            sed -i '/compileOnly.*com\.facebook\.react:react-native/d' "$gradle_file"
            
            # Remove classpath project dependencies
            sed -i '/classpath.*project(/d' "$gradle_file"
            sed -i '/classpath.*":ReactAndroid"/d' "$gradle_file"
            
            echo "Fixed $lib"
          fi
        done

    - name: Add ReactAndroid Project
      run: |
        echo "=== Adding ReactAndroid Project ==="
        if ! grep -q "include.*ReactAndroid" android/settings.gradle; then
          echo "include ':ReactAndroid'" >> android/settings.gradle
          echo "project(':ReactAndroid').projectDir = new File(rootProject.projectDir, '../node_modules/react-native/ReactAndroid')" >> android/settings.gradle
        fi

    - name: Clear Gradle Caches
      run: |
        echo "=== Clearing Gradle Caches ==="
        rm -rf ~/.gradle/caches/
        rm -rf ~/.gradle/wrapper/
        rm -rf ~/.gradle/daemon/
        gradle --stop || echo "Gradle daemon not running"

    - name: Generate Debug Keystore
      run: |
        cd android/app
        if [ ! -f "debug.keystore" ]; then
          keytool -genkey -v -keystore debug.keystore -alias androiddebugkey \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -storepass android -keypass android \
            -dname "CN=Android Debug,O=Android,C=US"
        fi

    - name: Test Configuration
      working-directory: android
      run: |
        echo "=== Testing Configuration ==="
        gradle projects --no-daemon --warning-mode=none

    - name: Clean Build
      working-directory: android
      run: gradle clean --no-daemon --warning-mode=none

    - name: Build Debug APK
      working-directory: android
      run: |
        echo "Building Debug APK..."
        gradle :app:assembleDebug --no-daemon --warning-mode=none --console=plain --max-workers=1

    - name: Build Release APK
      working-directory: android
      run: |
        echo "Building Release APK..."
        gradle :app:assembleRelease --no-daemon --warning-mode=none --console=plain --max-workers=1

    - name: Build Release AAB
      working-directory: android
      run: |
        echo "Building Release AAB..."
        gradle :app:bundleRelease --no-daemon --warning-mode=none --console=plain --max-workers=1

    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: vyakti-ai-debug-apk
        path: android/app/build/outputs/apk/debug/*.apk

    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: vyakti-ai-release-apk
        path: android/app/build/outputs/apk/release/*.apk

    - name: Upload Release AAB
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: vyakti-ai-release-aab
        path: android/app/build/outputs/bundle/release/*.aab

    - name: Build Summary
      if: always()
      run: |
        echo "=== Build Summary ==="
        echo "All React Native library fixes applied"
        echo "Built artifacts:"
        ls -la android/app/build/outputs/apk/debug/ || echo "Debug APK not found"
        ls -la android/app/build/outputs/apk/release/ || echo "Release APK not found"
        ls -la android/app/build/outputs/bundle/release/ || echo "Release AAB not found"
